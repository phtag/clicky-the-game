{"version":3,"sources":["components/Wrapper/index.js","components/Overview/index.js","components/Navbar/index.js","components/ImagesCard/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","react_default","a","createElement","className","children","Overview","Navbar","id","guess","score","topScore","ImagesCard","console","log","onClick","handleImageClickEvent","alt","name","src","image","App","state","myImages","images","selected","Object","toConsumableArray","_this","index","Number","fill","setState","sort","Math","random","_this2","this","forEach","element","push","_this3","components_Wrapper","components_Navbar","components_Overview","map","components_ImagesCard","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kiCAQeA,MALf,SAAiBC,GAEf,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMK,iBCK1BC,MAPf,SAAkBN,GAEhB,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAWH,EAAAC,EAAAC,cAAA,iGCYpBI,MAZf,SAAgBP,GACd,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yDACXH,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAeI,GAAG,uBAAhC,eACAP,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAeI,GAAG,yBAAyBR,EAAMS,OAC/DR,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAeI,GAAG,wBAAhC,UAA+DR,EAAMU,MAArE,iBAA0FV,EAAMW,SAAhG,cCGGC,MAXf,SAAoBZ,GAEhB,OADFa,QAAQC,IAAI,iBAERb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKY,QAAS,kBAAMf,EAAMgB,sBAAsBhB,EAAMQ,KAAKJ,UAAU,iBACnEH,EAAAC,EAAAC,cAAA,OAAKc,IAAKjB,EAAMkB,KAAMC,IAAKnB,EAAMoB,0BCuE5BC,6MAtEXC,MAAQ,CACNC,SAAUC,EACVd,MAAO,EACPD,MAAO,qCACPE,SAAU,EACVc,SAAU,MAUZT,sBAAwB,SAAAR,GACtB,IAAIiB,EAAQC,OAAAC,EAAA,EAAAD,CAAOE,EAAKN,MAAMG,UAC1BD,EAAME,OAAAC,EAAA,EAAAD,CAAOE,EAAKN,MAAMC,UACxBb,EAAQkB,EAAKN,MAAMZ,MACnBC,EAAWiB,EAAKN,MAAMX,SACtBF,EAAQmB,EAAKN,MAAMb,MACnBoB,EAAQC,OAAOtB,GAGdiB,EAASI,IASZpB,EAAQ,0BACRC,EAAQ,EACRe,EAASM,MAAK,OAVdrB,EACYC,IACVA,EAAWD,GAEbe,EAASI,IAAS,EAClBpB,EAAQ,0BAQVmB,EAAKI,SAAS,CAACP,aACfG,EAAKI,SAAS,CAACtB,UACfkB,EAAKI,SAAS,CAACvB,UACfmB,EAAKI,SAAS,CAACrB,aACfiB,EAAKI,SAAS,CACVT,SAAUC,EAAOS,KAAK,kBAAMC,KAAKC,SAAW,2FApC7B,IAAAC,EAAAC,KAEnBA,KAAKf,MAAMC,SAASe,QAAQ,SAAAC,GAC1BH,EAAKd,MAAMG,SAASe,MAAK,sCAsCxB,IAAAC,EAAAJ,KACL,OACEpC,EAAAC,EAAAC,cAACuC,EAAD,KACEzC,EAAAC,EAAAC,cAACwC,EAAD,CACElC,MAAO4B,KAAKf,MAAMb,MAClBC,MAAO2B,KAAKf,MAAMZ,MAClBC,SAAU0B,KAAKf,MAAMX,WACvBV,EAAAC,EAAAC,cAACyC,EAAD,MACGP,KAAKf,MAAMC,SAASsB,IAAI,SAAAzB,GAAK,OAC5BnB,EAAAC,EAAAC,cAAC2C,EAAD,CACE9B,sBAAuByB,EAAKzB,sBAC5B+B,IAAK3B,EAAMZ,GACXA,GAAIY,EAAMZ,GACVU,KAAME,EAAMF,KACZE,MAAOA,EAAMA,kBA/DT4B,IAAMC,WCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7b504594.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  // alert(\"Wrapper\");\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Overview(props) {\n  // alert(\"Overview\");\n  return <div className=\"overview\"><h2>Click on an image to earn points, but don't click any image more than once!</h2>\n  </div>;\n  // return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Overview;","import React from \"react\";\n// import { Link } from \"react-router-dom\";\nimport \"./style.css\";\n\n// Depending on the current path, this component sets the \"active\" class on the appropriate navigation link item\nfunction Navbar(props) {\n  return (\n    <nav className=\"navbar navbar-expand-md navbar-dark fixed-top bg-dark\">\n        <ul>\n            <li className=\"navbar-brand\" id=\"navbar-left-element\">Clicky Game</li>\n            <li className=\"navbar-brand\" id=\"navbar-center-element\">{props.guess}</li>\n            <li className=\"navbar-brand\" id=\"navbar-right-element\">Score: {props.score} | Top Score: {props.topScore} </li>\n        </ul>\n    </nav>\n);\n}\n\nexport default Navbar;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction ImagesCard(props) {\n  console.log(\"Image card...\");\n    return (\n      <div className=\"card\">\n        <div onClick={() => props.handleImageClickEvent(props.id)} className=\"img-container\">\n          <img alt={props.name} src={props.image} />\n        </div>\n      </div>\n    );\n  }\n  \nexport default ImagesCard;","import React from 'react';\nimport Wrapper from \"./components/Wrapper\";\nimport Overview from \"./components/Overview\";\nimport Navbar from \"./components/Navbar\";\nimport ImagesCard from \"./components/ImagesCard\";\nimport './App.css';\nimport images from \"./images.json\";\n\nclass App extends React.Component {\n    state = {\n      myImages: images,\n      score: 0,\n      guess: \"Click on an image to start playing\",\n      topScore: 0,\n      selected: []\n    };\n    componentDidMount () {\n      // Initialize selected states for each image\n      this.state.myImages.forEach(element => {\n        this.state.selected.push(false);\n      });\n      // alert(\"Did mount. length\" +  this.state.myImages.length);\n    }\n  \n    handleImageClickEvent = id => {\n      let selected = [...this.state.selected];\n      let images = [...this.state.myImages];\n      let score = this.state.score;\n      let topScore = this.state.topScore;\n      let guess = this.state.guess;\n      let index = Number(id);\n\n      // alert(\"Image click for id=\" + id + \" selected now=\" + selected[index]);\n      if (!selected[index]) {\n        score++;\n        if (score > topScore) {\n          topScore = score;\n        }\n        selected[index] = true;\n        guess = \"You guessed correctly!\";\n      } else {\n        // bad guess. reset and notify user\n        guess = \"You guessed incorrectly\";\n        score = 0;\n        selected.fill(false);\n      }\n\n      this.setState({selected});\n      this.setState({score});\n      this.setState({guess});\n      this.setState({topScore});\n      this.setState({\n          myImages: images.sort(() => Math.random() - 0.5),\n          // totalClick: this.state.totalClick + 1\n        });\n    };\n\nrender() {\n    return (\n      <Wrapper>\n        <Navbar\n          guess={this.state.guess}\n          score={this.state.score}\n          topScore={this.state.topScore}></Navbar>\n        <Overview></Overview>\n          {this.state.myImages.map(image => (\n            <ImagesCard\n              handleImageClickEvent={this.handleImageClickEvent}\n              key={image.id}\n              id={image.id}\n              name={image.name}\n              image={image.image}\n            />\n          ))}\n      </Wrapper>\n    );\n  }\n}\n  \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}